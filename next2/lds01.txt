


https://github.com/microsoft/wslg/issues/455


sudo docker run --privileged --name DOCKER_ULTRA_NANOC -e DISPLAY=unix$DISPLAY -e=QT_X11_NO_MITSHM=1 --ipc=host -it -d --net=host -v /dev/snd:/dev/snd --volume=/docker_job:/docker_job --volume=/home/nvidia:/mnt --volume=/tmp/.X11-unix:/tmp/.X11-unix -v /dev/shm:/dev/shm -v /var/run/avahi-daemon/socket:/var/run/avahi-daemon/socket -v /tmp/argus_socket:/tmp/argus_socket -v /dev/:/dev/ --runtime=nvidia ultralytics/ultralytics:8.3.23-jetson-jetpack4

==============================

sudo docker run --privileged --name DOCKER_ULTRA_NANOC -e DISPLAY=unix$DISPLAY -e=QT_X11_NO_MITSHM=1 --ipc=host -it -d --net=host -v /dev/snd:/dev/snd -v /dev:/dev -v /dev/shm:/dev/shm -v /tmp/argus_socket:/tmp/argus_socket --volume=/docker_job:/docker_job --volume=/home/nvidia:/mnt --volume=/tmp/.X11-unix:/tmp/.X11-unix --runtime=nvidia ultralytics/ultralytics:8.3.23-jetson-jetpack4

============================
sudo docker pull timongentzsch/l4t-ubuntu20-ros2-desktop:latest

sudo docker run --privileged --name DOCKER_ULTRA_NANOC -e DISPLAY=unix$DISPLAY -e=QT_X11_NO_MITSHM=1 --ipc=host -it -d --net=host -v /dev/snd:/dev/snd -v /dev:/dev -v /dev/shm:/dev/shm -v /tmp/argus_socket:/tmp/argus_socket --volume=/docker_job:/docker_job --volume=/home/nvidia:/data --volume=/tmp/.X11-unix:/tmp/.X11-unix --runtime=nvidia timongentzsch/l4t-ubuntu20-ros2-desktop:latest

alias DTR="sudo docker restart DOCKER_2004_RSAEM"
alias DTA="sudo docker exec -i -t  DOCKER_2004_RSAEM /bin/bash"

<install this first to check something>

apt install vim x11-apps usbutils   ( host must do :      sudo xhost + )

https://pypi.jetson-ai-lab.dev/jp5/cu114

===================================
    6  pip3 list | grep torch
    7  pip3 install torch-1.11.0-cp38-cp38-linux_aarch64.whl 
    8  pip3 install torchvision-0.12.0a0+9b5a3fe-cp38-cp38-linux_aarch64.whl 
    9  python3
   10  apt-get install libopenblas-dev 
   11  ldconfig

print(torch.cuda.is_available())
python3 cnn_mnist.py
=============================================
python3 -c 'import cv2; print(cv2.getBuildInformation())'

설치된 OpenCV 삭제
sudo apt-get purge libopencv* python-opencv

2. Setting Swap !!

3. modify   1. wisper.cpp jetson nano 설치
cd /usr/local/cuda-10.2/include/crt
sudo vi host_config.h

4. /OpenCV-4-8-0.sh
cmake -D CMAKE_BUILD_TYPE=Release \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-10.2 \
      -D CUDA_ARCH_BIN=5.3,6.2,7.2 \
      -D CUDA_ARCH_PTX=  \
      -D CUDA_FAST_MATH=ON  \
      -D CUDNN_VERSION='8.0'  \
      -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
      -D ENABLE_NEON=ON  \
      -D OPENCV_DNN_CUDA=OFF  \
      -D OPENCV_ENABLE_NONFREE=ON \
      -D OPENCV_EXTRA_MODULES_PATH=~/opencv/opencv_contrib-4.6.0/modules \
      -D WITH_CUDA=ON \
      -D WITH_TBB=ON \
      -D WITH_V4L=ON \
      -D WITH_LIBV4L=ON \
      -D WITH_OPENGL=ON \
      -D WITH_OPENMP=ON \
      -D WITH_FFMPEG=ON \
      -D WITH_GSTREAMER=ON \
      -D WITH_GSTREAMER_0_10=OFF \
      -D BUILD_opencv_python3=ON \
      -D BUILD_opencv_python2=OFF \
      -D BUILD_opencv_java=OFF \
      -D BUILD_opencv_js=OFF \
      -D OPENCV_ENABLE_NONFREE=ON \
      -D BUILD_EXAMPLES=ON \
      -D WITH_ONNX=ON \
      -D ONNXRT_ROOT_DIR=/usr/local \
      -D ONNX_RUNTIME_LIBDIR=/usr/local/lib \
      -D ONNX_RUNTIME_INCLUDE_DIR=/usr/local/include \
      ..

5. don't forget 

make install

ldconfig
===================================
onnxruntime 1.8.0 

pip3 install onnxruntime_gpu-1.8.0-cp38-cp38-linux_aarch64.whl


https://pypi.org/project/ultralytics/8.3.0/

pip install ultralytics==8.3.0

도커에 opencv 3.8 을 설치

ADD https://forums.developer.nvidia.com/uploads/short-url/hASzFOm9YsJx6VVFrDW1g44CMmv.whl tensorrt-8.2.0.6-cp38-none-linux_aarch64.whl # buildkit

pip3 install tensorrt-8.2.0.6-cp38-none-linux_aarch64.whl 

   74  pip3 uninstall numpy
   75  pip3 install numpy==1.23.5

https://github.com/jetsonai/DeepLearning4Projects/tree/main/Chap7/YOLOv11 

=================================

LDS-01
$ ls -l /dev/ttyUSB0

$ sudo chmod a+rw /dev/ttyUSB0

$ cd catkin_ws/src

$ git clone https://github.com/ROBOTIS-GIT/hls_lfcd_lds_driver

$ cd ..

$ catkin_make

OR

$ sudo apt-get install ros-kinetic-hls-lfcd-lds-driver

(새 터미널)

$ roslaunch hls_lfcd_lds_driver hlds_laser.launch

(새터미널)

$ rviz

(rviz 화면에서)

Global Options

-> Fixed Frame  laser

-> LaserScan (안보이면 Add(왼쪽하단)에서 찾아서 추가)

-> Topic  /scan
